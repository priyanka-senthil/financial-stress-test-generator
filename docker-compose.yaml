services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
    restart: always

  airflow-webserver:
    build: .
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    volumes:
      - ./data_pipeline/dags:/opt/airflow/dags
      - ./data_pipeline/logs:/opt/airflow/logs
      - ./data_pipeline/scripts:/opt/airflow/data_pipeline/scripts
      - ./data_pipeline/data:/opt/airflow/data_pipeline/data
      - ./configs:/opt/airflow/configs
      - ./.env:/opt/airflow/.env
    ports:
      - "8080:8080"
    command: >
      bash -c "airflow db migrate &&
               airflow users create --username admin --password admin123 --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
               airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      - postgres

  airflow-scheduler:
    build: .
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./data_pipeline/dags:/opt/airflow/dags
      - ./data_pipeline/logs:/opt/airflow/logs
      - ./data_pipeline/scripts:/opt/airflow/data_pipeline/scripts
      - ./data_pipeline/data:/opt/airflow/data_pipeline/data
      - ./configs:/opt/airflow/configs
      - ./.env:/opt/airflow/.env
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      - postgres

volumes:
  postgres-db-volume: